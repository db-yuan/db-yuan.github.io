<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>A Simple Example of Using Gurobi to Solve An Integer Optimization Problem</title>
    <link href="/2022/04/20/1_gurobi_example/"/>
    <url>/2022/04/20/1_gurobi_example/</url>
    
    <content type="html"><![CDATA[<p>The problem is provided by the course <em>Math 728 SP22</em> at UW-Madison. The code is a part of my homework submission.</p><h2 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h2><p>The following is a formulation of a multiple-product lot sizing problem having \(I\) products and \(T\) time periods.</p><p>\[<br>\begin{align}<br>&amp;\text{min}<br>&amp;\sum\limits_{i&#x3D;1}^{I}\sum\limits_{t&#x3D;1}^{T}h_is_{it}+\sum\limits_{i&#x3D;1}^{I}\sum\limits_{t&#x3D;1}^{T}f_iy_{it}<br>&amp;<br>&amp;\text{(1)}\\<br>&amp;\text{s.t.}<br>&amp;s_{i,t-1}+x_{it}&#x3D;D_{it}+s_{it},\quad<br>&amp;i&#x3D;1,\dots,I,t&#x3D;1,\dots,T<br>&amp;\text{(2)}\\<br>&amp;<br>&amp;s_{i0}&#x3D;SI_i,: s_{iT}&#x3D;SF,\quad<br>&amp;i&#x3D;1,\dots,I<br>&amp;\text{(3)}\\<br>&amp;<br>&amp;x_{it}\le (\sum\limits_{k&#x3D;t}^{T}D_{ik}+SF)y_{it},\quad<br>&amp;i&#x3D;1,\dots,I,t&#x3D;1,\dots,T<br>&amp;\text{(4)}\\<br>&amp;<br>&amp;\sum\limits_{i&#x3D;1}^{I}\alpha_ix_{it}+\sum\limits_{i&#x3D;1}^{I}\beta_iy_{it}\le L,\quad<br>&amp;t&#x3D;1,\dots,T<br>&amp;\text{(5)}\\<br>&amp;<br>&amp;x_{it}\ge0,s_{it}\ge0,y_{it}\in{0,1},\quad<br>&amp;i&#x3D;1,\dots,I<br>&amp;\text{(6)}<br>\end{align}<br>\]</p><p>Here, the variables \(x_{it}\) represent the amount of product \(i\) to produce in period \(t\), the binary variables \(y_{it}\) will equal one when a set-up of product \(i\) occurs in period \(t\) (which is required if \(x_{it}&gt;0\)), and sit represents the inventory level of product \(i\) at time \(t\). The data for the this problem are the holding costs \(h_i\), setup costs \(f_i\), initial inventory \(SI_i\) for each product \(i\), ending inventory \(SF\) (same for all products), demand \(D_{it}\) for each product \(i\) and time period \(t\); capacity \(L\) for the machine; and required machine usage \(\alpha_i\) for each unit of product \(i\) on machine \(k\) and required machine usage \(\beta_i\) if a setup of product \(i\) is done on machine \(k\) in a period. The constraints \(\text{(1)}\) specify the inventory balance conditions and constraint \(\text{(2)}\) specifies the inititial and final inventory levels. The constraint \(\text{(3)}\) specifies that a setup must occur if production for a product type \(i\) is done. All products must be processed on a single machine. Constraints \(\text{(4)}\) are the capacity constraints for the machine. The objective is to find a feasible production plan that meets the customer demands while minimizing the inventory holding costs and setup costs. (Production costs do not need to be considered because the total amount produced over time is fixed based on the demands and ending inventory requirements.) Implement and solve the model with a MIP solver of your choice.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gurobipy <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> gurobipy <span class="hljs-keyword">import</span> GRB<br><br><span class="hljs-comment">### Read data - this part is provided by the professor Jim but I modified it a little bit</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;prodplan1.txt&quot;</span>)<br><br>Istr = f.readline().split()<br>I = <span class="hljs-built_in">int</span>(Istr[<span class="hljs-number">0</span>])<br><br>Tstr = f.readline().split()<br>T = <span class="hljs-built_in">int</span>(Tstr[<span class="hljs-number">0</span>])<br><br>Iset = <span class="hljs-built_in">range</span>(I)  <span class="hljs-comment"># products</span><br>Tset = <span class="hljs-built_in">range</span>(T)   <span class="hljs-comment"># time periods </span><br><br>hcost = <span class="hljs-built_in">float</span>(f.readline().split()[<span class="hljs-number">0</span>]) <span class="hljs-comment"># h_i</span><br>sfin = <span class="hljs-built_in">float</span>(f.readline().split()[<span class="hljs-number">0</span>]) <span class="hljs-comment"># SF</span><br>cap = <span class="hljs-built_in">float</span>(f.readline().split()[<span class="hljs-number">0</span>]) <span class="hljs-comment"># L</span><br><br>dem = &#123;&#125; <span class="hljs-comment"># D_&#123;it&#125;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset:<br>    demvals = f.readline().split()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset:<br>        dem[i,t]=<span class="hljs-built_in">float</span>(demvals[t])<br><br>fstr=f.readline().split()<br>fcost=[<span class="hljs-built_in">float</span>(fstr[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset]<br>sinitstr=f.readline().split()<br>sinit=[<span class="hljs-built_in">int</span>(sinitstr[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset] <span class="hljs-comment"># SI_i</span><br>alphastr=f.readline().split()<br>alpha=[<span class="hljs-built_in">float</span>(alphastr[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset] <span class="hljs-comment"># alpha_i</span><br>betastr=f.readline().split()<br>beta=[<span class="hljs-built_in">float</span>(betastr[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset] <span class="hljs-comment"># beta_i</span><br><br>f.close()<br><br>fcost_for_obj = [] <span class="hljs-comment"># f_i</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fcost:<br>    fcost_for_obj += [i]*T<br><br>M = &#123;&#125; <span class="hljs-comment"># M_&#123;it&#125;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset:<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset:<br>        tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t, T):<br>            tmp += dem[i,k]<br>        M[i,t] = tmp + sfin<br><br><span class="hljs-comment">### Create the model</span><br>m = gp.Model()<br><br><span class="hljs-comment">### Create variables</span><br>x = m.addVars([(i,t) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset], vtype=GRB.CONTINUOUS, name=<span class="hljs-string">&#x27;x&#x27;</span>)<br>s = m.addVars([(i,t) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset], obj=hcost, vtype=GRB.CONTINUOUS, name=<span class="hljs-string">&#x27;s&#x27;</span>)<br>y = m.addVars([(i,t) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset], obj=fcost_for_obj, vtype=GRB.BINARY, name=<span class="hljs-string">&#x27;y&#x27;</span>)<br><br><span class="hljs-comment">### Add constraints</span><br><span class="hljs-comment"># For constranits (1) and (2)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset:<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset:<br>        <span class="hljs-keyword">if</span> t == <span class="hljs-number">0</span>:<br>            m.addConstr(sinit[i] + x[i,t] == dem[i,t] + s[i,t])<br>        <span class="hljs-keyword">else</span>:<br>            m.addConstr(s[i,t-<span class="hljs-number">1</span>] + x[i,t] == dem[i,t] + s[i,t])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset:<br>    m.addConstr(s[i,T-<span class="hljs-number">1</span>] == sfin)<br><br><span class="hljs-comment"># For the constraint (3)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset:<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset:<br>        m.addConstr(x[i,t] &lt;= M[i,t]*y[i,t])<br><br><span class="hljs-comment"># For the constraint (4)</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset:<br>    m.addConstr(<span class="hljs-built_in">sum</span>([alpha[i]*x[i,t]+beta[i]*y[i,t] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset]) &lt;= cap)<br><br><span class="hljs-comment"># For the constraint (5)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Iset:<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> Tset:<br>        m.addConstr(x[i,t] &gt;= <span class="hljs-number">0</span>)<br>        m.addConstr(s[i,t] &gt;= <span class="hljs-number">0</span>)<br><br><span class="hljs-comment">### Optimize the model</span><br>m.Params.timelimit = <span class="hljs-number">120.0</span> <span class="hljs-comment"># Set a time limit</span><br>m.optimize()<br></code></pre></td></tr></table></figure><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p><img src="https://dbyuan.s3.amazonaws.com/1-1.png" width="100%" height="100%"></img></p>]]></content>
    
    
    <categories>
      
      <category>Everything About Data</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Optimization</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes: Creating Different Types of Plots Using Matplotlib</title>
    <link href="/2022/04/16/3_matplotlib_example/"/>
    <url>/2022/04/16/3_matplotlib_example/</url>
    
    <content type="html"><![CDATA[<p>I made this summary after studying how to create some often-used plots using Matplotlib package in Python. Some examples are originally from <a href="https://medium.com/sfu-cspmp/advanced-visualization-for-data-scientists-with-matplotlib-15c28863c41c">Veekesh Dhununjoy</a> on Medium, and the dataset can be downloaded <a href="https://dbyuan.s3.amazonaws.com/property_tax_report_2018.csv">here</a>.</p><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Import packages</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> cm<br><span class="hljs-keyword">from</span> matplotlib.ticker <span class="hljs-keyword">import</span> FormatStrFormatter<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br>pd.set_option(<span class="hljs-string">&#x27;display.max_columns&#x27;</span>, <span class="hljs-literal">None</span>) <span class="hljs-comment"># show all columns</span><br><br><span class="hljs-comment"># Read Data</span><br>raw_data = pd.read_csv(<span class="hljs-string">&quot;property_tax_report_2018.csv&quot;</span>)<br>raw_data.head()<br></code></pre></td></tr></table></figure><h2 id="Line-plot"><a href="#Line-plot" class="headerlink" title="Line plot"></a>Line plot</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### Line plot</span><br><span class="hljs-comment"># Prepare data</span><br>df = raw_data.copy()<br>df = df[df[<span class="hljs-string">&#x27;PROPERTY_POSTAL_CODE&#x27;</span>].notna()] <span class="hljs-comment"># remove properties without postal code</span><br>df = df.groupby(<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>, as_index=<span class="hljs-literal">False</span>)[<span class="hljs-string">&#x27;PID&#x27;</span>].count().astype(<span class="hljs-string">&#x27;int&#x27;</span>).dropna()<br>df.columns = [<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>, <span class="hljs-string">&#x27;NUMBER_BUILT&#x27;</span>]<br>df = df[df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>] &gt;= <span class="hljs-number">1900</span>]<br><br><span class="hljs-comment"># Plot</span><br>plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>plt.plot(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>], df[<span class="hljs-string">&#x27;NUMBER_BUILT&#x27;</span>], color=<span class="hljs-string">&#x27;dodgerblue&#x27;</span>, linewidth=<span class="hljs-number">2</span>, label=<span class="hljs-string">&#x27;Number of properties built&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Year&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Number of properties built&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.title(<span class="hljs-string">&#x27;Number of properties built between 1900 and &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>].iloc[-<span class="hljs-number">1</span>]), fontsize=<span class="hljs-number">16</span>)<br>plt.legend(fontsize=<span class="hljs-number">16</span>)<br>plt.savefig(<span class="hljs-string">&#x27;line_plot.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-1.jpg" width="100%" height="100%"></img></p><h2 id="Bar-plot"><a href="#Bar-plot" class="headerlink" title="Bar plot"></a>Bar plot</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### Bar plot</span><br>plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>plt.bar(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>], df[<span class="hljs-string">&#x27;NUMBER_BUILT&#x27;</span>], color=<span class="hljs-string">&#x27;dodgerblue&#x27;</span>, width=<span class="hljs-number">1</span>, align=<span class="hljs-string">&#x27;center&#x27;</span>, alpha=<span class="hljs-number">0.8</span>, label=<span class="hljs-string">&#x27;Number of properties built&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Year&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Number of properties built&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.title(<span class="hljs-string">&#x27;Number of properties built between 1900 and &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>].iloc[-<span class="hljs-number">1</span>]), fontsize=<span class="hljs-number">16</span>)<br>plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.legend(fontsize=<span class="hljs-number">16</span>)<br>plt.savefig(<span class="hljs-string">&#x27;bar_plot.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-2.jpg" width="100%" height="100%"></img></p><h2 id="Scatter-plot"><a href="#Scatter-plot" class="headerlink" title="Scatter plot"></a>Scatter plot</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### Scatter plot</span><br>plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>plt.scatter(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>], df[<span class="hljs-string">&#x27;NUMBER_BUILT&#x27;</span>], s=<span class="hljs-number">200</span>, color=<span class="hljs-string">&#x27;dodgerblue&#x27;</span>, alpha=<span class="hljs-number">0.8</span>, marker=<span class="hljs-string">&#x27;.&#x27;</span>, edgecolors=<span class="hljs-string">&#x27;black&#x27;</span>, label=<span class="hljs-string">&#x27;Number of properties built&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Year&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Number of properties built&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.title(<span class="hljs-string">&#x27;Number of properties built between 1900 and &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>].iloc[-<span class="hljs-number">1</span>]), fontsize=<span class="hljs-number">16</span>)<br>plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.legend(fontsize=<span class="hljs-number">16</span>)<br>plt.savefig(<span class="hljs-string">&#x27;scatter_plot.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-3.jpg" width="100%" height="100%"></img></p><h2 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### Histogram</span><br>plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>plt.hist(df[<span class="hljs-string">&#x27;NUMBER_BUILT&#x27;</span>], color=<span class="hljs-string">&#x27;dodgerblue&#x27;</span>, bins=<span class="hljs-number">50</span>, align=<span class="hljs-string">&#x27;mid&#x27;</span>, alpha=<span class="hljs-number">0.8</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Number of properties built&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Frequency&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.title(<span class="hljs-string">&#x27;Distribution of the number of properties built each year between 1900 and &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>].iloc[-<span class="hljs-number">1</span>]), fontsize=<span class="hljs-number">16</span>)<br>plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;histogram.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-4.jpg" width="100%" height="100%"></img></p><h2 id="Pie-chart"><a href="#Pie-chart" class="headerlink" title="Pie chart"></a>Pie chart</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### Pie chart</span><br><span class="hljs-comment"># Prepare data</span><br>df = raw_data.copy()<br>df = df.groupby(<span class="hljs-string">&#x27;ZONE_CATEGORY&#x27;</span>, as_index=<span class="hljs-literal">False</span>)[<span class="hljs-string">&#x27;PID&#x27;</span>].count().dropna()<br>df.columns = [<span class="hljs-string">&#x27;ZONE_CATEGORY&#x27;</span>, <span class="hljs-string">&#x27;NUMBER&#x27;</span>]<br>df[<span class="hljs-string">&#x27;PERCENTAGE&#x27;</span>] = df[<span class="hljs-string">&#x27;NUMBER&#x27;</span>]/df[<span class="hljs-string">&#x27;NUMBER&#x27;</span>].<span class="hljs-built_in">sum</span>()<br>df_5_largest = df.nlargest(columns=<span class="hljs-string">&#x27;PERCENTAGE&#x27;</span>, n=<span class="hljs-number">5</span>)[[<span class="hljs-string">&#x27;ZONE_CATEGORY&#x27;</span>, <span class="hljs-string">&#x27;PERCENTAGE&#x27;</span>]]<br>df = df_5_largest.append(&#123;<span class="hljs-string">&#x27;ZONE_CATEGORY&#x27;</span>:<span class="hljs-string">&#x27;Others&#x27;</span>, <span class="hljs-string">&#x27;PERCENTAGE&#x27;</span>:<span class="hljs-number">1</span>-df_5_largest[<span class="hljs-string">&#x27;PERCENTAGE&#x27;</span>].<span class="hljs-built_in">sum</span>()&#125;, ignore_index=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># Plot</span><br>plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>plt.pie(df[<span class="hljs-string">&#x27;PERCENTAGE&#x27;</span>],<br>            labels=df[<span class="hljs-string">&#x27;ZONE_CATEGORY&#x27;</span>],<br>            colors=[<span class="hljs-string">&#x27;orangered&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;gold&#x27;</span>, <span class="hljs-string">&#x27;aqua&#x27;</span>, <span class="hljs-string">&#x27;dodgerblue&#x27;</span>, <span class="hljs-string">&#x27;saddlebrown&#x27;</span>],<br>            startangle = <span class="hljs-number">90</span>,<br>            explode=(<span class="hljs-number">0.05</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>            autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>,<br>            textprops=&#123;<span class="hljs-string">&#x27;fontsize&#x27;</span>:<span class="hljs-number">12</span>&#125;)<br>plt.title(<span class="hljs-string">&#x27;Distribution of zone categories&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.savefig(<span class="hljs-string">&#x27;pie_chart.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-5.jpg" width="100%" height="100%"></img></p><h2 id="3D-line-plot"><a href="#3D-line-plot" class="headerlink" title="3D line plot"></a>3D line plot</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### 3D line plot</span><br><span class="hljs-comment"># Prepare the data</span><br>z = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>*np.pi, np.pi/<span class="hljs-number">50</span>)<br>x = np.sin(z)<br>y = np.cos(z)<br><br><span class="hljs-comment"># Plot</span><br>fig = plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>ax = plt.axes(projection=<span class="hljs-string">&quot;3d&quot;</span>)<br>ax.plot(x, y, z)<br>ax.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;y&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.set_zlabel(<span class="hljs-string">&#x27;z&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.xaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%.2f&#x27;</span>))<br>ax.yaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%.2f&#x27;</span>))<br>ax.zaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%.2f&#x27;</span>))<br>ax.set_title(<span class="hljs-string">&#x27;$x=\sin z$, $y=\cos z$&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.savefig(<span class="hljs-string">&#x27;3d_line_plot.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-6.jpg" width="100%" height="100%"></img></p><h2 id="3D-scatter-plot"><a href="#3D-scatter-plot" class="headerlink" title="3D scatter plot"></a>3D scatter plot</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### 3D scatter plot</span><br><span class="hljs-comment"># Prepare the data</span><br>df = raw_data.copy()<br>df = df.groupby(<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>, as_index=<span class="hljs-literal">False</span>).agg(&#123;<span class="hljs-string">&#x27;PID&#x27;</span>: <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-string">&#x27;CURRENT_LAND_VALUE&#x27;</span>:<span class="hljs-string">&#x27;sum&#x27;</span>&#125;).astype(<span class="hljs-string">&#x27;int&#x27;</span>).dropna()<br>df.columns = [<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>, <span class="hljs-string">&#x27;NUMBER&#x27;</span>, <span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>]<br>df = df[df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>] &gt;= <span class="hljs-number">1900</span>]<br>df[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>] = df[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>]/<span class="hljs-number">1e6</span><br>df1 = df[df[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>] &lt; <span class="hljs-number">2000</span>]<br>df2 = df[(df[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>] &gt;= <span class="hljs-number">2000</span>) &amp; (df[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>] &lt;= <span class="hljs-number">3000</span>)]<br>df3 = df[df[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>] &gt; <span class="hljs-number">3000</span>]<br><br><span class="hljs-comment"># Plot</span><br>fig = plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>ax = plt.axes(projection=<span class="hljs-string">&quot;3d&quot;</span>)<br>ax.scatter(df1[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>], df1[<span class="hljs-string">&#x27;NUMBER&#x27;</span>], df1[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>], s=<span class="hljs-number">200</span>, marker=<span class="hljs-string">&#x27;.&#x27;</span>, color=<span class="hljs-string">&#x27;orangered&#x27;</span>, label=<span class="hljs-string">&#x27;Number of properties with sum of land value less than 2,000 million&#x27;</span>)<br>ax.scatter(df2[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>], df2[<span class="hljs-string">&#x27;NUMBER&#x27;</span>], df2[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>], s=<span class="hljs-number">200</span>, marker=<span class="hljs-string">&#x27;.&#x27;</span>, color=<span class="hljs-string">&#x27;gold&#x27;</span>, label=<span class="hljs-string">&#x27;Number of properties with sum of land value between 2,000 million and 3,000 million&#x27;</span>)<br>ax.scatter(df3[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>], df3[<span class="hljs-string">&#x27;NUMBER&#x27;</span>], df3[<span class="hljs-string">&#x27;SUM_VALUE&#x27;</span>], s=<span class="hljs-number">200</span>, marker=<span class="hljs-string">&#x27;.&#x27;</span>, color=<span class="hljs-string">&#x27;dodgerblue&#x27;</span>, label=<span class="hljs-string">&#x27;Number of properties with sum of land value more than 3,000 million&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;Year&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;Number of properties built&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.set_zlabel(<span class="hljs-string">&#x27;Current land value (million)&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.xaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%d&#x27;</span>))<br>ax.yaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%d&#x27;</span>))<br>ax.zaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%d&#x27;</span>))<br>ax.set_title(<span class="hljs-string">&#x27;Sum of current land value of properties built each year between 1900 and &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(df[<span class="hljs-string">&#x27;YEAR_BUILT&#x27;</span>].iloc[-<span class="hljs-number">1</span>]), fontsize=<span class="hljs-number">16</span>)<br>ax.legend()<br>plt.savefig(<span class="hljs-string">&#x27;3d_scatter_plot.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-7.jpg" width="100%" height="100%"></img></p><h2 id="Surface-plot"><a href="#Surface-plot" class="headerlink" title="Surface plot"></a>Surface plot</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### Surface plot</span><br><span class="hljs-comment"># Prepare the data</span><br>X, Y = np.meshgrid(np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.5</span>),np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>));<br>Z = np.sin(X)+ np.cos(Y)<br><br><span class="hljs-comment"># Plot</span><br>fig = plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">9</span>))<br>ax = plt.axes(projection=<span class="hljs-string">&quot;3d&quot;</span>)<br>_ = ax.plot_surface(X, Y, Z, cmap=cm.rainbow, antialiased=<span class="hljs-literal">False</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;y&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.set_zlabel(<span class="hljs-string">&#x27;z&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>ax.xaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%.2f&#x27;</span>))<br>ax.yaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%.2f&#x27;</span>))<br>ax.zaxis.set_major_formatter(FormatStrFormatter(<span class="hljs-string">&#x27;%.2f&#x27;</span>))<br>ax.set_title(<span class="hljs-string">&#x27;$z=\sin x+\cos y$&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>fig.colorbar(_, shrink=<span class="hljs-number">0.5</span>, aspect=<span class="hljs-number">5</span>)<br>plt.savefig(<span class="hljs-string">&#x27;surface_plot.jpg&#x27;</span>, dpi=<span class="hljs-number">400</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://dbyuan.s3.amazonaws.com/3-8.jpg" width="100%" height="100%"></img></p>]]></content>
    
    
    <categories>
      
      <category>Everything About Data</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Data Visualization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Skydiving</title>
    <link href="/2022/04/09/2_skydiving/"/>
    <url>/2022/04/09/2_skydiving/</url>
    
    <content type="html"><![CDATA[<p>The second before I jumped out of the plane, I was thinking “NOOO WAYYY!”</p><p><video src="https://dbyuan.s3.amazonaws.com/2-1.mp4" width="100%" height="100%" controls="controls"></video></p>]]></content>
    
    
    <categories>
      
      <category>Bucketlist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sports</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
